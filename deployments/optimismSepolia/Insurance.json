{
  "address": "0x3ED6F48BA9fCa1A33E959A7628F5b59c15b6B6B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "_insuredToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "_treasuryToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_policyPriceAPR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_oracleDecimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataTimestampCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpiredPolicy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GetDataServiceIdNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "PriceAboveThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "PriceUnderThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampIsNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "valueByteSize",
          "type": "uint256"
        }
      ],
      "name": "TooLargeValueByteSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizatedHolder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexistantPolicy",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "insuredAmount",
          "type": "uint256"
        }
      ],
      "name": "PolicyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "repaymentAmount",
          "type": "uint256"
        }
      ],
      "name": "PolicyRepayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "YEAR_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "aggregateValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuredAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createPolicy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAllMockAuthorised",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAllMockExceptLastOneAuthorised",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedMockSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataServiceId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        }
      ],
      "name": "getRepayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "repaymentAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniqueSignersThreshold",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "policyHolder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "insuredAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "hashPolicy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuredToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        }
      ],
      "name": "policies",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyHolder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "insuredAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyPriceAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "threshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "validateTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "widthdrawLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd533c12b44d8157659d1a8fb2335e9e0cbb18d9c33d2fac8151414111f611188",
  "receipt": {
    "to": null,
    "from": "0x1b4cd36EAA7310E1e5Ae7Ca128F12bE3D40C8694",
    "contractAddress": "0x3ED6F48BA9fCa1A33E959A7628F5b59c15b6B6B9",
    "transactionIndex": 7,
    "gasUsed": "3000871",
    "logsBloom": "0x
    "blockHash": "0xf090aa3c3e6ea151defc099a5b0858ec7241ed7be9025ddf02a577baa767dcb4",
    "transactionHash": "0xd533c12b44d8157659d1a8fb2335e9e0cbb18d9c33d2fac8151414111f611188",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 16963900,
        "transactionHash": "0xd533c12b44d8157659d1a8fb2335e9e0cbb18d9c33d2fac8151414111f611188",
        "address": "0x3ED6F48BA9fCa1A33E959A7628F5b59c15b6B6B9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001b4cd36eaa7310e1e5ae7ca128f12be3d40c8694"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0xf090aa3c3e6ea151defc099a5b0858ec7241ed7be9025ddf02a577baa767dcb4"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 16963900,
        "transactionHash": "0xd533c12b44d8157659d1a8fb2335e9e0cbb18d9c33d2fac8151414111f611188",
        "address": "0x3ED6F48BA9fCa1A33E959A7628F5b59c15b6B6B9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001b4cd36eaa7310e1e5ae7ca128f12be3d40c8694",
          "0x0000000000000000000000001b4cd36eaa7310e1e5ae7ca128f12be3d40c8694"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0xf090aa3c3e6ea151defc099a5b0858ec7241ed7be9025ddf02a577baa767dcb4"
      }
    ],
    "blockNumber": 16963900,
    "cumulativeGasUsed": "6044475",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1b4cd36EAA7310E1e5Ae7Ca128F12bE3D40C8694",
    "0x49d2c1D548ae5767D66DF42f74c3eab4f35490e1",
    "0x478B538abc23e414A1007F715f95e20B85E728A3",
    5,
    99500000,
    8
  ],
  "numDeployments": 2,
  "solcInputHash": "bb55a9563f4c82184bf308d916db8215",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_insuredToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_treasuryToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_policyPriceAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oracleDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotPickMedianOfEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataTimestampCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredPolicy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GetDataServiceIdNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"PriceAboveThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"PriceUnderThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampIsNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueByteSize\",\"type\":\"uint256\"}],\"name\":\"TooLargeValueByteSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizatedHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexistantPolicy\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"}],\"name\":\"PolicyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"repaymentAmount\",\"type\":\"uint256\"}],\"name\":\"PolicyRepayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"YEAR_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"aggregateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createPolicy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAllMockAuthorised\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAllMockExceptLastOneAuthorised\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedMockSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataServiceId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"}],\"name\":\"getRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repaymentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniqueSignersThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"hashPolicy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuredToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"}],\"name\":\"policies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"insuredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyPriceAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"widthdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateValues(uint256[])\":{\"details\":\"This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value\",\"params\":{\"values\":\"An array of uint256 values from different signers\"},\"returns\":{\"_0\":\"Result of the aggregation in the form of a single number\"}},\"getDataServiceId()\":{\"details\":\"This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\",\"returns\":{\"_0\":\"dataServiceId being consumed by contract\"}},\"getUniqueSignersThreshold()\":{\"details\":\"This function should be overridden by the child consumer contract.\",\"returns\":{\"_0\":\"The minimum required value of unique authorised signers\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validateTimestamp(uint256)\":{\"details\":\"This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid\",\"params\":{\"receivedTimestampMilliseconds\":\"Timestamp extracted from calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Insurance.sol\":\"Insurance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n  error TooLargeValueByteSize(uint256 valueByteSize);\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount;\\n    (dataPackagesCount, calldataNegativeOffset) = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount, uint256 nextCalldataNegativeOffset)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return (dataPackagesCount, calldataNegativeOffset + DATA_PACKAGES_COUNT_BS);\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 dataPointNegativeOffset,\\n    uint256 dataPointValueByteSize\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 dataPointCalldataOffset = msg.data.length - dataPointNegativeOffset;\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n    if (dataPointValueByteSize >= 33) {\\n      revert TooLargeValueByteSize(dataPointValueByteSize);\\n    }\\n    unchecked {\\n      dataPointValue = dataPointValue >> (32 - dataPointValueByteSize) * 8; \\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 calldataOffset = msg.data.length - (calldataNegativeOffsetForDataPackage + SIG_BS + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset - DATA_POINTS_COUNT_BS;\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x059e911a27b1ac2d42930f198130381d688353b7b04fdad829558b532c148f96\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n  error DataTimestampCannotBeZero();\\n  error TimestampsMustBeEqual();\\n}\\n\",\"keccak256\":\"0x9654f99c87541c1050906fee7c1c1243fcbf21acd2aaa59c6b5f3e778526e735\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n\\n  error GetDataServiceIdNotImplemented();\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return dataServiceId which DataServiceWrapper will use if not provided explicitly .\\n   * If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\\n   * @return dataServiceId being consumed by contract\\n   */\\n  function getDataServiceId() public view virtual returns (string memory) {\\n    revert GetDataServiceIdNotImplemented();\\n  }\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receivedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receivedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overridden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. packages with different \\n   * timestamps or insufficient number of authorised signers) do not match, the function \\n   * will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   * @return dataPackagesTimestamp timestamp equal for all data packages\\n   */\\n  function _securelyExtractOracleValuesAndTimestampFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory, uint256 dataPackagesTimestamp)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length;) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount;\\n    (dataPackagesCount, calldataNegativeOffset) = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount;) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageTimestamp;\\n      (calldataNegativeOffset, dataPackageTimestamp) = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataTimestampCannotBeZero();\\n      }\\n\\n      if (dataPackageTimestamp != dataPackagesTimestamp && dataPackagesTimestamp != 0) {\\n        revert TimestampsMustBeEqual();\\n      }\\n\\n      dataPackagesTimestamp = dataPackageTimestamp;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n      unchecked {\\n        dataPackageIndex++;\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return (_getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds), dataPackagesTimestamp);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return nextCalldataNegativeOffset negative calldata offset for the next data package\\n   * @return dataPackageTimestamp data package timestamp\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256 nextCalldataNegativeOffset, uint256 dataPackageTimestamp) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n      uint48 extractedTimestamp;\\n\\n      signedMessageBytesCount = dataPointsCount * (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n      uint256 timestampCalldataOffset = msg.data.length - \\n        (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length - \\n        (calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      dataPackageTimestamp = extractedTimestamp;\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      calldataNegativeOffset = calldataNegativeOffset + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount;) {\\n        calldataNegativeOffset = calldataNegativeOffset + eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS;\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][uniqueSignerCountForDataFeedIds[dataFeedIdIndex]] = dataPointValue;\\n\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n          unchecked {\\n            dataFeedIdIndex++;\\n          }\\n        }\\n        unchecked {\\n           dataPointIndex++;\\n        }\\n      }\\n    }\\n\\n    return (calldataNegativeOffset, dataPackageTimestamp);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x8da7218c8cd345bbb65bcc1a13a31c397bceaa10854aa2b439f188ab3e392ff7\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    (uint256[] memory values, uint256 timestamp) = _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIds);\\n    validateTimestamp(timestamp);\\n    return values;\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification and aggregating values from different authorised signers \\n   * into a single numeric value. If any of the required conditions do not match, \\n   * the function will revert.\\n   * Note! This function returns the timestamp of the packages (it requires it to be \\n   * the same for all), but does not validate this timestamp.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array and data packages timestamp\\n   */\\n   function getOracleNumericValuesAndTimestampFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory, uint256)\\n  {\\n    return _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    (uint256[] memory valuesWithoutDuplicates, uint256 timestamp) = _securelyExtractOracleValuesAndTimestampFromTxMsg(dataFeedIdsWithoutDuplicates);\\n    validateTimestamp(timestamp);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0x4094dfbc4d9169aebbc8585e4b6a1dd857a012c8a988612d768f78b7684f73fb\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/MainDemoConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract MainDemoConsumerBase is RedstoneConsumerNumericBase {\\n  function getDataServiceId() public view virtual override returns (string memory) {\\n    return \\\"redstone-main-demo\\\";\\n  }\\n\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 1;\\n  }\\n\\n  function getAuthorisedSignerIndex(address signerAddress)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint8)\\n  {\\n    if (signerAddress == 0x0C39486f770B26F5527BBBf942726537986Cd7eb) {\\n      return 0;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6654b1dfa48265518ff58ee5197a668d79736f282287dea3177bed6e8c92f125\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 2) {\\n      return (arr[0] + arr[1]) / 2;\\n    }\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = arr[middleIndex - 1] + arr[middleIndex];\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe091bc5f3422baa3706a0bb18d6e70225b25f8f23be3bd840a14d016777e3aa\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/mocks/AuthorisedMockSignersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConstants.sol\\\";\\n\\nabstract contract AuthorisedMockSignersBase is RedstoneConstants {\\n  function getAuthorisedMockSignerIndex(address signerAddress)\\n    public\\n    view\\n    virtual\\n    returns (uint8)\\n  {\\n    return getAllMockExceptLastOneAuthorised(signerAddress);\\n  }\\n\\n  function getAllMockExceptLastOneAuthorised(address signerAddress)\\n    public\\n    view\\n    virtual\\n    returns (uint8)\\n  {\\n    if (signerAddress == 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199) {\\n      revert SignerNotAuthorised(signerAddress);\\n    } else {\\n      return getAllMockAuthorised(signerAddress);\\n    }\\n  }\\n\\n  function getAllMockAuthorised(address signerAddress) public view virtual returns (uint8) {\\n    // Looks like an array but consumes less gas\\n    if (signerAddress == 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) {\\n      return 0;\\n    } else if (signerAddress == 0x70997970C51812dc3A010C7d01b50e0d17dc79C8) {\\n      return 1;\\n    } else if (signerAddress == 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC) {\\n      return 2;\\n    } else if (signerAddress == 0x90F79bf6EB2c4f870365E785982E1f101E93b906) {\\n      return 3;\\n    } else if (signerAddress == 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65) {\\n      return 4;\\n    } else if (signerAddress == 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc) {\\n      return 5;\\n    } else if (signerAddress == 0x976EA74026E726554dB657fA54763abd0C3a0aa9) {\\n      return 6;\\n    } else if (signerAddress == 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955) {\\n      return 7;\\n    } else if (signerAddress == 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f) {\\n      return 8;\\n    } else if (signerAddress == 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720) {\\n      return 9;\\n    } else if (signerAddress == 0xBcd4042DE499D14e55001CcbB24a551F3b954096) {\\n      return 10;\\n    } else if (signerAddress == 0x71bE63f3384f5fb98995898A86B02Fb2426c5788) {\\n      return 11;\\n    } else if (signerAddress == 0xFABB0ac9d68B0B445fB7357272Ff202C5651694a) {\\n      return 12;\\n    } else if (signerAddress == 0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec) {\\n      return 13;\\n    } else if (signerAddress == 0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097) {\\n      return 14;\\n    } else if (signerAddress == 0xcd3B766CCDd6AE721141F452C550Ca635964ce71) {\\n      return 15;\\n    } else if (signerAddress == 0x2546BcD3c84621e976D8185a91A922aE77ECEc30) {\\n      return 16;\\n    } else if (signerAddress == 0xbDA5747bFD65F08deb54cb465eB87D40e51B197E) {\\n      return 17;\\n    } else if (signerAddress == 0xdD2FD4581271e230360230F9337D5c0430Bf44C0) {\\n      return 18;\\n    } else if (signerAddress == 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199) {\\n      return 19;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe5f244539e997d26f2f4319ad65371887ae502535c73bbf5f43d2fef32373f04\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/mocks/RedstoneConsumerNumericMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\nimport \\\"./AuthorisedMockSignersBase.sol\\\";\\n\\ncontract RedstoneConsumerNumericMock is RedstoneConsumerNumericBase, AuthorisedMockSignersBase {\\n  uint256 internal constant MIN_TIMESTAMP_MILLISECONDS = 1654353400000;\\n\\n  error TimestampIsNotValid();\\n\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 10;\\n  }\\n\\n  function getAuthorisedSignerIndex(address signerAddress)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint8)\\n  {\\n    return getAuthorisedMockSignerIndex(signerAddress);\\n  }\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual override {\\n    if (receivedTimestampMilliseconds < MIN_TIMESTAMP_MILLISECONDS) {\\n      revert TimestampIsNotValid();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5ac8700b0771bf54c65c45f23a10369e0e457d3782b9e6962540b19bb6723c02\",\"license\":\"MIT\"},\"contracts/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IInsurance {\\n    struct Policy {\\n        address policyHolder;\\n        uint256 insuredAmount;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n    }\\n\\n    event PolicyCreated(uint256 indexed policyId, address indexed holder, uint256 indexed insuredAmount);\\n\\n    event PolicyRepayed(uint256 indexed policyId, uint256 indexed repaymentAmount);\\n\\n    error UnexistantPolicy();\\n    error UnauthorizatedHolder();\\n    error ExpiredPolicy();\\n    error PolicyAlreadyExists();\\n    error PriceAboveThreshold(uint256 currentPrice, uint256 threshold);\\n    error PriceUnderThreshold(uint256 currentPrice, uint256 threshold);\\n}\\n\",\"keccak256\":\"0x9cb18b2cbe364dfe561b2736e20a8a51565545883f665eff72afcd436517defe\",\"license\":\"MIT\"},\"contracts/Insurance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/MainDemoConsumerBase.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/mocks/RedstoneConsumerNumericMock.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\n\\ncontract Insurance is IInsurance, Ownable, RedstoneConsumerNumericMock {\\n    uint256 public constant YEAR_DURATION = 31_536_000; // 24 * 60 * 60 * 365\\n\\n    IERC20Metadata public insuredToken;\\n    IERC20Metadata public treasuryToken;\\n    uint256 public policyPriceAPR;\\n\\n    uint256 public threshold;\\n    bytes32 public symbol;\\n    uint256 public oracleDecimals;\\n\\n    mapping(uint256 policyId => Policy) public policies;\\n\\n    constructor(\\n        address _initialOwner,\\n        IERC20Metadata _insuredToken,\\n        IERC20Metadata _treasuryToken,\\n        uint256 _policyPriceAPR,\\n        uint256 _threshold,\\n        uint256 _oracleDecimals // 8 is a default for RedStone\\n    ) {\\n        transferOwnership(_initialOwner);\\n        insuredToken = _insuredToken;\\n        treasuryToken = _treasuryToken;\\n        policyPriceAPR = _policyPriceAPR;\\n        threshold = _threshold;\\n        symbol = \\\"USDT\\\";\\n        // symbol = bytes32(bytes(insuredToken.symbol()));\\n        oracleDecimals = _oracleDecimals;\\n    }\\n\\n    // function getLatestStxPrice() public view returns (uint256) {\\n    //     bytes32 dataFeedId = bytes32(\\\"USDT\\\");\\n    //     return getOracleNumericValueFromTxMsg(dataFeedId);\\n    // }\\n\\n    // function validateTimestamp(uint256 receivedTimestampMilliseconds)\\n    //     public\\n    //     view\\n    //     override(RedstoneConsumerNumericMock, MainDemoConsumerBase)\\n    // {}\\n\\n    function createPolicy(uint256 insuredAmount, uint256 duration) public returns (uint256 policyId) {\\n        uint256 insuranceFee = (insuredAmount * policyPriceAPR * duration) / (YEAR_DURATION * 100);\\n\\n        // add depeg check\\n        uint256 priceCurrent = getOracleNumericValueFromTxMsg(bytes32(symbol));\\n        if (priceCurrent < threshold) {\\n            revert PriceUnderThreshold(priceCurrent, threshold);\\n        }\\n\\n        policyId = hashPolicy(msg.sender, insuredAmount, block.timestamp, duration);\\n        if (policies[policyId].policyHolder != address(0)) {\\n            revert PolicyAlreadyExists();\\n        }\\n        policies[policyId] = Policy(msg.sender, insuredAmount, block.timestamp, block.timestamp + duration);\\n\\n        treasuryToken.transferFrom(msg.sender, address(this), insuranceFee);\\n        emit PolicyCreated(policyId, msg.sender, insuredAmount);\\n    }\\n\\n    function getRepayment(uint256 policyId) public returns (uint256 repaymentAmount) {\\n        //checks\\n        Policy storage policy = policies[policyId];\\n        if (policy.policyHolder == address(0)) {\\n            revert UnexistantPolicy();\\n        }\\n        if (policy.policyHolder != msg.sender) {\\n            revert UnauthorizatedHolder();\\n        }\\n        if (policy.endTimestamp < block.timestamp) {\\n            // uint256 timestamp = policy.endTimestamp;\\n            // delete policies[policyId];\\n            revert ExpiredPolicy();\\n        }\\n\\n        // price request\\n        uint256 price = getOracleNumericValueFromTxMsg(symbol);\\n\\n        if (price > threshold) {\\n            revert PriceAboveThreshold(price, threshold);\\n        }\\n\\n        repaymentAmount = (policy.insuredAmount * (10 ** oracleDecimals - price)) / 10 ** oracleDecimals;\\n        insuredToken.transfer(msg.sender, repaymentAmount);\\n\\n        emit PolicyRepayed(policyId, repaymentAmount);\\n\\n        // delete policies[policyId];\\n    }\\n\\n    function addLiquidity(uint256 amount) public onlyOwner {\\n        insuredToken.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function widthdrawLiquidity(uint256 amount) public onlyOwner {\\n        insuredToken.transfer(msg.sender, amount);\\n    }\\n\\n    function collectFee() public onlyOwner {\\n        treasuryToken.transfer(msg.sender, treasuryToken.balanceOf(address(this)));\\n    }\\n\\n    function hashPolicy(address policyHolder, uint256 insuredAmount, uint256 startTimestamp, uint256 duration)\\n        public\\n        pure\\n        virtual\\n        returns (uint256 policyId)\\n    {\\n        return uint256(keccak256(abi.encodePacked(policyHolder, insuredAmount, startTimestamp, duration)));\\n    }\\n}\\n\",\"keccak256\":\"0xae4213b2c5a2a8b1d5c4e502e4160eaaa49e08dd54ccf4bc5c590c1c3936d9a9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200382838038062003828833981810160405281019062000037919062000438565b620000576200004b6200013260201b60201c565b6200013a60201b60201c565b6200006886620001fe60201b60201c565b84600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600381905550816004819055507f555344540000000000000000000000000000000000000000000000000000000060058190555080600681905550505050505050620005ef565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200020e6200029460201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000277906200055b565b60405180910390fd5b62000291816200013a60201b60201c565b50565b620002a46200013260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002ca6200032560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000323576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200031a90620005cd565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003808262000353565b9050919050565b620003928162000373565b81146200039e57600080fd5b50565b600081519050620003b28162000387565b92915050565b6000620003c58262000373565b9050919050565b620003d781620003b8565b8114620003e357600080fd5b50565b600081519050620003f781620003cc565b92915050565b6000819050919050565b6200041281620003fd565b81146200041e57600080fd5b50565b600081519050620004328162000407565b92915050565b60008060008060008060c087890312156200045857620004576200034e565b5b60006200046889828a01620003a1565b96505060206200047b89828a01620003e6565b95505060406200048e89828a01620003e6565b9450506060620004a189828a0162000421565b9350506080620004b489828a0162000421565b92505060a0620004c789828a0162000421565b9150509295509295509295565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000543602683620004d4565b91506200055082620004e5565b604082019050919050565b60006020820190508181036000830152620005768162000534565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620005b5602083620004d4565b9150620005c2826200057d565b602082019050919050565b60006020820190508181036000830152620005e881620005a6565b9050919050565b61322980620005ff6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806395d89b41116100de578063d22158fa11610097578063e68b52e711610071578063e68b52e7146104a0578063f2fde38b146104be578063f50b2efe146104da578063f90c4924146104f65761018e565b8063d22158fa14610433578063d3e8948314610463578063d4d5d32a146104965761018e565b806395d89b4114610349578063b24ebfcc14610367578063b2ce514b14610397578063b715b861146103b5578063c274583a146103e5578063c7e2f28e146104035761018e565b806348b02adf1161014b578063715018a611610125578063715018a6146102c15780637e484605146102cb5780638da5cb5b146102fb57806395262d9f146103195761018e565b806348b02adf1461026957806351c6590a1461028757806355a547d5146102a35761018e565b80630dc0ba721461019357806314b21c3c146101b15780632b796968146101cd5780633ce142f5146101eb578063429989f01461021b57806342cde4e81461024b575b600080fd5b61019b610514565b6040516101a89190612619565b60405180910390f35b6101cb60048036038101906101c69190612674565b61051c565b005b6101d56105c8565b6040516101e29190612720565b60405180910390f35b61020560048036038101906102009190612779565b6105ee565b60405161021291906127c2565b60405180910390f35b61023560048036038101906102309190612779565b610600565b60405161024291906127c2565b60405180910390f35b610253610c84565b6040516102609190612619565b60405180910390f35b610271610c8a565b60405161027e9190612619565b60405180910390f35b6102a1600480360381019061029c9190612674565b610c90565b005b6102ab610d3e565b6040516102b89190612619565b60405180910390f35b6102c9610ea2565b005b6102e560048036038101906102e09190612674565b610eb6565b6040516102f29190612619565b60405180910390f35b610303611193565b60405161031091906127ec565b60405180910390f35b610333600480360381019061032e9190612779565b6111bc565b60405161034091906127c2565b60405180910390f35b6103516111ce565b60405161035e9190612820565b60405180910390f35b610381600480360381019061037c9190612994565b6111d4565b60405161038e9190612619565b60405180910390f35b61039f6111e6565b6040516103ac9190612720565b60405180910390f35b6103cf60048036038101906103ca91906129dd565b61120c565b6040516103dc9190612619565b60405180910390f35b6103ed611248565b6040516103fa9190612ac3565b60405180910390f35b61041d60048036038101906104189190612ae5565b61127c565b60405161042a9190612619565b60405180910390f35b61044d60048036038101906104489190612779565b611566565b60405161045a91906127c2565b60405180910390f35b61047d60048036038101906104789190612674565b6115fc565b60405161048d9493929190612b25565b60405180910390f35b61049e61164c565b005b6104a8611792565b6040516104b59190612619565b60405180910390f35b6104d860048036038101906104d39190612779565b611798565b005b6104f460048036038101906104ef9190612674565b61181b565b005b6104fe61185e565b60405161050b91906127c2565b60405180910390f35b6301e1338081565b610524611867565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610581929190612b6a565b6020604051808303816000875af11580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c49190612bcb565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105f9826111bc565b9050919050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106525760009050610c7f565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a25760019050610c7f565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106f25760029050610c7f565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107425760039050610c7f565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107925760049050610c7f565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107e25760059050610c7f565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108325760069050610c7f565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108825760079050610c7f565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108d25760089050610c7f565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109225760099050610c7f565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361097257600a9050610c7f565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109c257600b9050610c7f565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a1257600c9050610c7f565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a6257600d9050610c7f565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ab257600e9050610c7f565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b0257600f9050610c7f565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b525760109050610c7f565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ba25760119050610c7f565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf25760129050610c7f565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c425760139050610c7f565b816040517fec459bc0000000000000000000000000000000000000000000000000000000008152600401610c7691906127ec565b60405180910390fd5b919050565b60045481565b60035481565b610c98611867565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610cf793929190612bf8565b6020604051808303816000875af1158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612bcb565b5050565b600080610d496118e5565b90506000610d56826119f6565b8161ffff169150809350819250505060008103610d9f576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610e9c576000610db584611a66565b9050600080606886610dc79190612c5e565b90506000816000369050610ddb9190612c92565b90508035925060008365ffffffffffff1603610e23576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008803610e3b578265ffffffffffff169750610e7d565b878365ffffffffffff1614610e7c576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b8387610e899190612c5e565b9650505050508080600101915050610da2565b50505090565b610eaa611867565b610eb46000611aa5565b565b600080600760008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f58576040517f6e3da05200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fe1576040517f5cf35e6e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160030154101561101f576040517f0e92ddd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061102c600554611b69565b905060045481111561107957806004546040517f29524920000000000000000000000000000000000000000000000000000000008152600401611070929190612cc6565b60405180910390fd5b600654600a6110889190612e22565b81600654600a6110989190612e22565b6110a29190612c92565b83600101546110b19190612e6d565b6110bb9190612ede565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161111a929190612b6a565b6020604051808303816000875af1158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d9190612bcb565b5082847fcc226262d991683790f4321c51bb6b1a86690cbfd8de6aea52f9a6890e16c86a60405160405180910390a35050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006111c782611566565b9050919050565b60055481565b60006111df82611c05565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000848484846040516020016112259493929190612f78565b6040516020818303038152906040528051906020012060001c9050949350505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060646301e133806112909190612e6d565b836003548661129f9190612e6d565b6112a99190612e6d565b6112b39190612ede565b905060006112c2600554611b69565b905060045481101561130f57806004546040517fd449f3a5000000000000000000000000000000000000000000000000000000008152600401611306929190612cc6565b60405180910390fd5b61131b3386428761120c565b9250600073ffffffffffffffffffffffffffffffffffffffff166007600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b9576040517f84d27a2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200142815260200185426113f89190612c5e565b8152506007600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030155905050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016114d593929190612bf8565b6020604051808303816000875af11580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190612bcb565b50843373ffffffffffffffffffffffffffffffffffffffff16847f601882301d3e3fce7fe3a99d4bb17ef5b6699b417bdd29f2bfb82e19fcbcb66060405160405180910390a4505092915050565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115ec57816040517fec459bc00000000000000000000000000000000000000000000000000000000081526004016115e391906127ec565b60405180910390fd5b6115f582610600565b9050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b611654611867565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116ee91906127ec565b602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190612fdb565b6040518363ffffffff1660e01b815260040161174c929190612b6a565b6020604051808303816000875af115801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f9190612bcb565b50565b60065481565b6117a0611867565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361180f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118069061307a565b60405180910390fd5b61181881611aa5565b50565b6501812f2590c081101561185b576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000600a905090565b61186f611c17565b73ffffffffffffffffffffffffffffffffffffffff1661188d611193565b73ffffffffffffffffffffffffffffffffffffffff16146118e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118da906130e6565b60405180910390fd5b565b60008060203603356602ed57011e000081166602ed57011e0000149150508061193a576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000803690506029111561197a576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff166119979190612c5e565b6119a19190612c5e565b905060003690506002826119b59190612c5e565b11156119ed576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b6000806000602084611a089190612c5e565b90506000369050811115611a48576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335925082600285611a5c9190612c5e565b9250925050915091565b6000806000611a7484611c1f565b91509150604e816020611a879190612c5e565b83611a929190612e6d565b611a9c9190612c5e565b92505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600167ffffffffffffffff811115611b8757611b86612851565b5b604051908082528060200260200182016040528015611bb55781602001602082028036833780820191505090505b5090508281600081518110611bcd57611bcc613106565b5b602002602001018181525050611be281611c81565b600081518110611bf557611bf4613106565b5b6020026020010151915050919050565b6000611c1082611ca6565b9050919050565b600033905090565b60008060008060006020604187611c369190612c5e565b611c409190612c5e565b6000369050611c4f9190612c92565b905080359250600381611c629190612c92565b9050803591508262ffffff1694508163ffffffff169350505050915091565b6060600080611c8f84611dfb565b91509150611c9c8161181b565b8192505050919050565b60006002825103611d0657600282600181518110611cc757611cc6613106565b5b602002602001015183600081518110611ce357611ce2613106565b5b6020026020010151611cf59190612c5e565b611cff9190612ede565b9050611df6565b6000825103611d41576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d4a82612076565b600060028351611d5a9190612ede565b9050600060028451611d6c9190613135565b03611dd7576000838281518110611d8657611d85613106565b5b602002602001015184600184611d9c9190612c92565b81518110611dad57611dac613106565b5b6020026020010151611dbf9190612c5e565b9050600281611dce9190612ede565b92505050611df6565b828181518110611dea57611de9613106565b5b60200260200101519150505b919050565b6060600080835167ffffffffffffffff811115611e1b57611e1a612851565b5b604051908082528060200260200182016040528015611e495781602001602082028036833780820191505090505b5090506000845167ffffffffffffffff811115611e6957611e68612851565b5b604051908082528060200260200182016040528015611e975781602001602082028036833780820191505090505b5090506000855167ffffffffffffffff811115611eb757611eb6612851565b5b604051908082528060200260200182016040528015611eea57816020015b6060815260200190600190039081611ed55790505b50905060005b8651811015611f7757611f0161185e565b60ff1667ffffffffffffffff811115611f1d57611f1c612851565b5b604051908082528060200260200182016040528015611f4b5781602001602082028036833780820191505090505b50828281518110611f5f57611f5e613106565b5b60200260200101819052508080600101915050611ef0565b506000611f826118e5565b90506000611f8f826119f6565b8161ffff16915080935081925050506000604051905060005b8281101561205e576000611fbf8b898989896120c9565b809250819650505060008103612001576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b888114158015612012575060008914155b15612049576040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80985082604052818060010192505050611fa8565b506120698487612395565b9750505050505050915091565b805160208201602082028101815b818110156120c257825b818110156120b65781518151808210156120a9578084528183525b505060208101905061208e565b50602081019050612084565b5050505050565b60008060008060006120da86611c1f565b915091506000806060600080600d6020876120f59190612c5e565b886121009190612e6d565b61210a9190612c5e565b9150600060688c61211b9190612c5e565b600036905061212a9190612c92565b905060008360418e61213c9190612c5e565b6121469190612c5e565b60003690506121559190612c92565b9050612161848261218f565b94508360208601209550813592506121ab565b60006040519050818152602081019050818101604052919050565b600061219a83612174565b838382376020810391505092915050565b8265ffffffffffff169a506121cc8660418f6121c79190612c5e565b6124dc565b96506121d7876105ee565b60ff16995050505050505050604e866121f09190612c5e565b955060008060005b84811015612382576020848a61220e9190612c5e565b6122189190612c5e565b9850612224898561255b565b809350819450505060005b8d51811015612374578d818151811061224b5761224a613106565b5b602002602001015184036123675760008c828151811061226e5761226d613106565b5b6020026020010151905061228281896125d6565b1580156122b2575061229261185e565b60ff168e83815181106122a8576122a7613106565b5b6020026020010151105b1561236157838c83815181106122cb576122ca613106565b5b60200260200101518f84815181106122e6576122e5613106565b5b6020026020010151815181106122ff576122fe613106565b5b6020026020010181815250508d828151811061231e5761231d613106565b5b60200260200101805180919061233390613166565b8152505061234181896125ef565b8d838151811061235457612353613106565b5b6020026020010181815250505b50612374565b808060010191505061222f565b5080806001019150506121f8565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff8111156123b4576123b3612851565b5b6040519080825280602002602001820160405280156123e25781602001602082028036833780820191505090505b50905060006123ef61185e565b60ff16905060005b85518110156124d0578185828151811061241457612413613106565b5b6020026020010151101561247b5784818151811061243557612434613106565b5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401612472929190612cc6565b60405180910390fd5b60006124a087838151811061249357612492613106565b5b60200260200101516111d4565b9050808483815181106124b6576124b5613106565b5b6020026020010181815250505080806001019150506123f7565b50819250505092915050565b6000806000808436038035935060208101905080359250602081019050803560001a9150506001868285856040516000815260200160405260405161252494939291906131ae565b6020604051602081039080840390855afa158015612546573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060008460003690506125709190612c92565b90508035925060208101359150602184106125c257836040517fc000fc420000000000000000000000000000000000000000000000000000000081526004016125b99190612619565b60405180910390fd5b6008846020030282901c9150509250929050565b600080826001901b841690506000811191505092915050565b6000816001901b8317905092915050565b6000819050919050565b61261381612600565b82525050565b600060208201905061262e600083018461260a565b92915050565b6000604051905090565b600080fd5b600080fd5b61265181612600565b811461265c57600080fd5b50565b60008135905061266e81612648565b92915050565b60006020828403121561268a5761268961263e565b5b60006126988482850161265f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006126e66126e16126dc846126a1565b6126c1565b6126a1565b9050919050565b60006126f8826126cb565b9050919050565b600061270a826126ed565b9050919050565b61271a816126ff565b82525050565b60006020820190506127356000830184612711565b92915050565b6000612746826126a1565b9050919050565b6127568161273b565b811461276157600080fd5b50565b6000813590506127738161274d565b92915050565b60006020828403121561278f5761278e61263e565b5b600061279d84828501612764565b91505092915050565b600060ff82169050919050565b6127bc816127a6565b82525050565b60006020820190506127d760008301846127b3565b92915050565b6127e68161273b565b82525050565b600060208201905061280160008301846127dd565b92915050565b6000819050919050565b61281a81612807565b82525050565b60006020820190506128356000830184612811565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61288982612840565b810181811067ffffffffffffffff821117156128a8576128a7612851565b5b80604052505050565b60006128bb612634565b90506128c78282612880565b919050565b600067ffffffffffffffff8211156128e7576128e6612851565b5b602082029050602081019050919050565b600080fd5b600061291061290b846128cc565b6128b1565b90508083825260208201905060208402830185811115612933576129326128f8565b5b835b8181101561295c5780612948888261265f565b845260208401935050602081019050612935565b5050509392505050565b600082601f83011261297b5761297a61283b565b5b813561298b8482602086016128fd565b91505092915050565b6000602082840312156129aa576129a961263e565b5b600082013567ffffffffffffffff8111156129c8576129c7612643565b5b6129d484828501612966565b91505092915050565b600080600080608085870312156129f7576129f661263e565b5b6000612a0587828801612764565b9450506020612a168782880161265f565b9350506040612a278782880161265f565b9250506060612a388782880161265f565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a7e578082015181840152602081019050612a63565b60008484015250505050565b6000612a9582612a44565b612a9f8185612a4f565b9350612aaf818560208601612a60565b612ab881612840565b840191505092915050565b60006020820190508181036000830152612add8184612a8a565b905092915050565b60008060408385031215612afc57612afb61263e565b5b6000612b0a8582860161265f565b9250506020612b1b8582860161265f565b9150509250929050565b6000608082019050612b3a60008301876127dd565b612b47602083018661260a565b612b54604083018561260a565b612b61606083018461260a565b95945050505050565b6000604082019050612b7f60008301856127dd565b612b8c602083018461260a565b9392505050565b60008115159050919050565b612ba881612b93565b8114612bb357600080fd5b50565b600081519050612bc581612b9f565b92915050565b600060208284031215612be157612be061263e565b5b6000612bef84828501612bb6565b91505092915050565b6000606082019050612c0d60008301866127dd565b612c1a60208301856127dd565b612c27604083018461260a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c6982612600565b9150612c7483612600565b9250828201905080821115612c8c57612c8b612c2f565b5b92915050565b6000612c9d82612600565b9150612ca883612600565b9250828203905081811115612cc057612cbf612c2f565b5b92915050565b6000604082019050612cdb600083018561260a565b612ce8602083018461260a565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612d4657808604811115612d2257612d21612c2f565b5b6001851615612d315780820291505b8081029050612d3f85612cef565b9450612d06565b94509492505050565b600082612d5f5760019050612e1b565b81612d6d5760009050612e1b565b8160018114612d835760028114612d8d57612dbc565b6001915050612e1b565b60ff841115612d9f57612d9e612c2f565b5b8360020a915084821115612db657612db5612c2f565b5b50612e1b565b5060208310610133831016604e8410600b8410161715612df15782820a905083811115612dec57612deb612c2f565b5b612e1b565b612dfe8484846001612cfc565b92509050818404811115612e1557612e14612c2f565b5b81810290505b9392505050565b6000612e2d82612600565b9150612e3883612600565b9250612e657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612d4f565b905092915050565b6000612e7882612600565b9150612e8383612600565b9250828202612e9181612600565b91508282048414831517612ea857612ea7612c2f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ee982612600565b9150612ef483612600565b925082612f0457612f03612eaf565b5b828204905092915050565b60008160601b9050919050565b6000612f2782612f0f565b9050919050565b6000612f3982612f1c565b9050919050565b612f51612f4c8261273b565b612f2e565b82525050565b6000819050919050565b612f72612f6d82612600565b612f57565b82525050565b6000612f848287612f40565b601482019150612f948286612f61565b602082019150612fa48285612f61565b602082019150612fb48284612f61565b60208201915081905095945050505050565b600081519050612fd581612648565b92915050565b600060208284031215612ff157612ff061263e565b5b6000612fff84828501612fc6565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613064602683612a4f565b915061306f82613008565b604082019050919050565b6000602082019050818103600083015261309381613057565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130d0602083612a4f565b91506130db8261309a565b602082019050919050565b600060208201905081810360008301526130ff816130c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061314082612600565b915061314b83612600565b92508261315b5761315a612eaf565b5b828206905092915050565b600061317182612600565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131a3576131a2612c2f565b5b600182019050919050565b60006080820190506131c36000830187612811565b6131d060208301866127b3565b6131dd6040830185612811565b6131ea6060830184612811565b9594505050505056fea26469706673582212202d5c6f3d07ff555c94e9b5ff68d4ff556052fb6eeb0c3814814451d1841f197864736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806395d89b41116100de578063d22158fa11610097578063e68b52e711610071578063e68b52e7146104a0578063f2fde38b146104be578063f50b2efe146104da578063f90c4924146104f65761018e565b8063d22158fa14610433578063d3e8948314610463578063d4d5d32a146104965761018e565b806395d89b4114610349578063b24ebfcc14610367578063b2ce514b14610397578063b715b861146103b5578063c274583a146103e5578063c7e2f28e146104035761018e565b806348b02adf1161014b578063715018a611610125578063715018a6146102c15780637e484605146102cb5780638da5cb5b146102fb57806395262d9f146103195761018e565b806348b02adf1461026957806351c6590a1461028757806355a547d5146102a35761018e565b80630dc0ba721461019357806314b21c3c146101b15780632b796968146101cd5780633ce142f5146101eb578063429989f01461021b57806342cde4e81461024b575b600080fd5b61019b610514565b6040516101a89190612619565b60405180910390f35b6101cb60048036038101906101c69190612674565b61051c565b005b6101d56105c8565b6040516101e29190612720565b60405180910390f35b61020560048036038101906102009190612779565b6105ee565b60405161021291906127c2565b60405180910390f35b61023560048036038101906102309190612779565b610600565b60405161024291906127c2565b60405180910390f35b610253610c84565b6040516102609190612619565b60405180910390f35b610271610c8a565b60405161027e9190612619565b60405180910390f35b6102a1600480360381019061029c9190612674565b610c90565b005b6102ab610d3e565b6040516102b89190612619565b60405180910390f35b6102c9610ea2565b005b6102e560048036038101906102e09190612674565b610eb6565b6040516102f29190612619565b60405180910390f35b610303611193565b60405161031091906127ec565b60405180910390f35b610333600480360381019061032e9190612779565b6111bc565b60405161034091906127c2565b60405180910390f35b6103516111ce565b60405161035e9190612820565b60405180910390f35b610381600480360381019061037c9190612994565b6111d4565b60405161038e9190612619565b60405180910390f35b61039f6111e6565b6040516103ac9190612720565b60405180910390f35b6103cf60048036038101906103ca91906129dd565b61120c565b6040516103dc9190612619565b60405180910390f35b6103ed611248565b6040516103fa9190612ac3565b60405180910390f35b61041d60048036038101906104189190612ae5565b61127c565b60405161042a9190612619565b60405180910390f35b61044d60048036038101906104489190612779565b611566565b60405161045a91906127c2565b60405180910390f35b61047d60048036038101906104789190612674565b6115fc565b60405161048d9493929190612b25565b60405180910390f35b61049e61164c565b005b6104a8611792565b6040516104b59190612619565b60405180910390f35b6104d860048036038101906104d39190612779565b611798565b005b6104f460048036038101906104ef9190612674565b61181b565b005b6104fe61185e565b60405161050b91906127c2565b60405180910390f35b6301e1338081565b610524611867565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610581929190612b6a565b6020604051808303816000875af11580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c49190612bcb565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105f9826111bc565b9050919050565b600073f39fd6e51aad88f6f4ce6ab8827279cfffb9226673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106525760009050610c7f565b7370997970c51812dc3a010c7d01b50e0d17dc79c873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a25760019050610c7f565b733c44cdddb6a900fa2b585dd299e03d12fa4293bc73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106f25760029050610c7f565b7390f79bf6eb2c4f870365e785982e1f101e93b90673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107425760039050610c7f565b7315d34aaf54267db7d7c367839aaf71a00a2c6a6573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107925760049050610c7f565b739965507d1a55bcc2695c58ba16fb37d819b0a4dc73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107e25760059050610c7f565b73976ea74026e726554db657fa54763abd0c3a0aa973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108325760069050610c7f565b7314dc79964da2c08b23698b3d3cc7ca32193d995573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108825760079050610c7f565b7323618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108d25760089050610c7f565b73a0ee7a142d267c1f36714e4a8f75612f20a7972073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109225760099050610c7f565b73bcd4042de499d14e55001ccbb24a551f3b95409673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361097257600a9050610c7f565b7371be63f3384f5fb98995898a86b02fb2426c578873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109c257600b9050610c7f565b73fabb0ac9d68b0b445fb7357272ff202c5651694a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a1257600c9050610c7f565b731cbd3b2770909d4e10f157cabc84c7264073c9ec73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a6257600d9050610c7f565b73df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ab257600e9050610c7f565b73cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b0257600f9050610c7f565b732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b525760109050610c7f565b73bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ba25760119050610c7f565b73dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf25760129050610c7f565b738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c425760139050610c7f565b816040517fec459bc0000000000000000000000000000000000000000000000000000000008152600401610c7691906127ec565b60405180910390fd5b919050565b60045481565b60035481565b610c98611867565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610cf793929190612bf8565b6020604051808303816000875af1158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190612bcb565b5050565b600080610d496118e5565b90506000610d56826119f6565b8161ffff169150809350819250505060008103610d9f576040517f8552ff3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610e9c576000610db584611a66565b9050600080606886610dc79190612c5e565b90506000816000369050610ddb9190612c92565b90508035925060008365ffffffffffff1603610e23576040517f336dc9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008803610e3b578265ffffffffffff169750610e7d565b878365ffffffffffff1614610e7c576040517fd9d1f46500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b8387610e899190612c5e565b9650505050508080600101915050610da2565b50505090565b610eaa611867565b610eb46000611aa5565b565b600080600760008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f58576040517f6e3da05200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fe1576040517f5cf35e6e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160030154101561101f576040517f0e92ddd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061102c600554611b69565b905060045481111561107957806004546040517f29524920000000000000000000000000000000000000000000000000000000008152600401611070929190612cc6565b60405180910390fd5b600654600a6110889190612e22565b81600654600a6110989190612e22565b6110a29190612c92565b83600101546110b19190612e6d565b6110bb9190612ede565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161111a929190612b6a565b6020604051808303816000875af1158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d9190612bcb565b5082847fcc226262d991683790f4321c51bb6b1a86690cbfd8de6aea52f9a6890e16c86a60405160405180910390a35050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006111c782611566565b9050919050565b60055481565b60006111df82611c05565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000848484846040516020016112259493929190612f78565b6040516020818303038152906040528051906020012060001c9050949350505050565b60606040517f608b530700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060646301e133806112909190612e6d565b836003548661129f9190612e6d565b6112a99190612e6d565b6112b39190612ede565b905060006112c2600554611b69565b905060045481101561130f57806004546040517fd449f3a5000000000000000000000000000000000000000000000000000000008152600401611306929190612cc6565b60405180910390fd5b61131b3386428761120c565b9250600073ffffffffffffffffffffffffffffffffffffffff166007600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b9576040517f84d27a2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200142815260200185426113f89190612c5e565b8152506007600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030155905050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016114d593929190612bf8565b6020604051808303816000875af11580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190612bcb565b50843373ffffffffffffffffffffffffffffffffffffffff16847f601882301d3e3fce7fe3a99d4bb17ef5b6699b417bdd29f2bfb82e19fcbcb66060405160405180910390a4505092915050565b6000738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115ec57816040517fec459bc00000000000000000000000000000000000000000000000000000000081526004016115e391906127ec565b60405180910390fd5b6115f582610600565b9050919050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b611654611867565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116ee91906127ec565b602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190612fdb565b6040518363ffffffff1660e01b815260040161174c929190612b6a565b6020604051808303816000875af115801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f9190612bcb565b50565b60065481565b6117a0611867565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361180f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118069061307a565b60405180910390fd5b61181881611aa5565b50565b6501812f2590c081101561185b576040517f355b874300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000600a905090565b61186f611c17565b73ffffffffffffffffffffffffffffffffffffffff1661188d611193565b73ffffffffffffffffffffffffffffffffffffffff16146118e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118da906130e6565b60405180910390fd5b565b60008060203603356602ed57011e000081166602ed57011e0000149150508061193a576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000803690506029111561197a576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff166119979190612c5e565b6119a19190612c5e565b905060003690506002826119b59190612c5e565b11156119ed576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b6000806000602084611a089190612c5e565b90506000369050811115611a48576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335925082600285611a5c9190612c5e565b9250925050915091565b6000806000611a7484611c1f565b91509150604e816020611a879190612c5e565b83611a929190612e6d565b611a9c9190612c5e565b92505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600167ffffffffffffffff811115611b8757611b86612851565b5b604051908082528060200260200182016040528015611bb55781602001602082028036833780820191505090505b5090508281600081518110611bcd57611bcc613106565b5b602002602001018181525050611be281611c81565b600081518110611bf557611bf4613106565b5b6020026020010151915050919050565b6000611c1082611ca6565b9050919050565b600033905090565b60008060008060006020604187611c369190612c5e565b611c409190612c5e565b6000369050611c4f9190612c92565b905080359250600381611c629190612c92565b9050803591508262ffffff1694508163ffffffff169350505050915091565b6060600080611c8f84611dfb565b91509150611c9c8161181b565b8192505050919050565b60006002825103611d0657600282600181518110611cc757611cc6613106565b5b602002602001015183600081518110611ce357611ce2613106565b5b6020026020010151611cf59190612c5e565b611cff9190612ede565b9050611df6565b6000825103611d41576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d4a82612076565b600060028351611d5a9190612ede565b9050600060028451611d6c9190613135565b03611dd7576000838281518110611d8657611d85613106565b5b602002602001015184600184611d9c9190612c92565b81518110611dad57611dac613106565b5b6020026020010151611dbf9190612c5e565b9050600281611dce9190612ede565b92505050611df6565b828181518110611dea57611de9613106565b5b60200260200101519150505b919050565b6060600080835167ffffffffffffffff811115611e1b57611e1a612851565b5b604051908082528060200260200182016040528015611e495781602001602082028036833780820191505090505b5090506000845167ffffffffffffffff811115611e6957611e68612851565b5b604051908082528060200260200182016040528015611e975781602001602082028036833780820191505090505b5090506000855167ffffffffffffffff811115611eb757611eb6612851565b5b604051908082528060200260200182016040528015611eea57816020015b6060815260200190600190039081611ed55790505b50905060005b8651811015611f7757611f0161185e565b60ff1667ffffffffffffffff811115611f1d57611f1c612851565b5b604051908082528060200260200182016040528015611f4b5781602001602082028036833780820191505090505b50828281518110611f5f57611f5e613106565b5b60200260200101819052508080600101915050611ef0565b506000611f826118e5565b90506000611f8f826119f6565b8161ffff16915080935081925050506000604051905060005b8281101561205e576000611fbf8b898989896120c9565b809250819650505060008103612001576040517fdfb25a7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b888114158015612012575060008914155b15612049576040517f4cbc474200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80985082604052818060010192505050611fa8565b506120698487612395565b9750505050505050915091565b805160208201602082028101815b818110156120c257825b818110156120b65781518151808210156120a9578084528183525b505060208101905061208e565b50602081019050612084565b5050505050565b60008060008060006120da86611c1f565b915091506000806060600080600d6020876120f59190612c5e565b886121009190612e6d565b61210a9190612c5e565b9150600060688c61211b9190612c5e565b600036905061212a9190612c92565b905060008360418e61213c9190612c5e565b6121469190612c5e565b60003690506121559190612c92565b9050612161848261218f565b94508360208601209550813592506121ab565b60006040519050818152602081019050818101604052919050565b600061219a83612174565b838382376020810391505092915050565b8265ffffffffffff169a506121cc8660418f6121c79190612c5e565b6124dc565b96506121d7876105ee565b60ff16995050505050505050604e866121f09190612c5e565b955060008060005b84811015612382576020848a61220e9190612c5e565b6122189190612c5e565b9850612224898561255b565b809350819450505060005b8d51811015612374578d818151811061224b5761224a613106565b5b602002602001015184036123675760008c828151811061226e5761226d613106565b5b6020026020010151905061228281896125d6565b1580156122b2575061229261185e565b60ff168e83815181106122a8576122a7613106565b5b6020026020010151105b1561236157838c83815181106122cb576122ca613106565b5b60200260200101518f84815181106122e6576122e5613106565b5b6020026020010151815181106122ff576122fe613106565b5b6020026020010181815250508d828151811061231e5761231d613106565b5b60200260200101805180919061233390613166565b8152505061234181896125ef565b8d838151811061235457612353613106565b5b6020026020010181815250505b50612374565b808060010191505061222f565b5080806001019150506121f8565b5050508594505050509550959350505050565b60606000835167ffffffffffffffff8111156123b4576123b3612851565b5b6040519080825280602002602001820160405280156123e25781602001602082028036833780820191505090505b50905060006123ef61185e565b60ff16905060005b85518110156124d0578185828151811061241457612413613106565b5b6020026020010151101561247b5784818151811061243557612434613106565b5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401612472929190612cc6565b60405180910390fd5b60006124a087838151811061249357612492613106565b5b60200260200101516111d4565b9050808483815181106124b6576124b5613106565b5b6020026020010181815250505080806001019150506123f7565b50819250505092915050565b6000806000808436038035935060208101905080359250602081019050803560001a9150506001868285856040516000815260200160405260405161252494939291906131ae565b6020604051602081039080840390855afa158015612546573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060008460003690506125709190612c92565b90508035925060208101359150602184106125c257836040517fc000fc420000000000000000000000000000000000000000000000000000000081526004016125b99190612619565b60405180910390fd5b6008846020030282901c9150509250929050565b600080826001901b841690506000811191505092915050565b6000816001901b8317905092915050565b6000819050919050565b61261381612600565b82525050565b600060208201905061262e600083018461260a565b92915050565b6000604051905090565b600080fd5b600080fd5b61265181612600565b811461265c57600080fd5b50565b60008135905061266e81612648565b92915050565b60006020828403121561268a5761268961263e565b5b60006126988482850161265f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006126e66126e16126dc846126a1565b6126c1565b6126a1565b9050919050565b60006126f8826126cb565b9050919050565b600061270a826126ed565b9050919050565b61271a816126ff565b82525050565b60006020820190506127356000830184612711565b92915050565b6000612746826126a1565b9050919050565b6127568161273b565b811461276157600080fd5b50565b6000813590506127738161274d565b92915050565b60006020828403121561278f5761278e61263e565b5b600061279d84828501612764565b91505092915050565b600060ff82169050919050565b6127bc816127a6565b82525050565b60006020820190506127d760008301846127b3565b92915050565b6127e68161273b565b82525050565b600060208201905061280160008301846127dd565b92915050565b6000819050919050565b61281a81612807565b82525050565b60006020820190506128356000830184612811565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61288982612840565b810181811067ffffffffffffffff821117156128a8576128a7612851565b5b80604052505050565b60006128bb612634565b90506128c78282612880565b919050565b600067ffffffffffffffff8211156128e7576128e6612851565b5b602082029050602081019050919050565b600080fd5b600061291061290b846128cc565b6128b1565b90508083825260208201905060208402830185811115612933576129326128f8565b5b835b8181101561295c5780612948888261265f565b845260208401935050602081019050612935565b5050509392505050565b600082601f83011261297b5761297a61283b565b5b813561298b8482602086016128fd565b91505092915050565b6000602082840312156129aa576129a961263e565b5b600082013567ffffffffffffffff8111156129c8576129c7612643565b5b6129d484828501612966565b91505092915050565b600080600080608085870312156129f7576129f661263e565b5b6000612a0587828801612764565b9450506020612a168782880161265f565b9350506040612a278782880161265f565b9250506060612a388782880161265f565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a7e578082015181840152602081019050612a63565b60008484015250505050565b6000612a9582612a44565b612a9f8185612a4f565b9350612aaf818560208601612a60565b612ab881612840565b840191505092915050565b60006020820190508181036000830152612add8184612a8a565b905092915050565b60008060408385031215612afc57612afb61263e565b5b6000612b0a8582860161265f565b9250506020612b1b8582860161265f565b9150509250929050565b6000608082019050612b3a60008301876127dd565b612b47602083018661260a565b612b54604083018561260a565b612b61606083018461260a565b95945050505050565b6000604082019050612b7f60008301856127dd565b612b8c602083018461260a565b9392505050565b60008115159050919050565b612ba881612b93565b8114612bb357600080fd5b50565b600081519050612bc581612b9f565b92915050565b600060208284031215612be157612be061263e565b5b6000612bef84828501612bb6565b91505092915050565b6000606082019050612c0d60008301866127dd565b612c1a60208301856127dd565b612c27604083018461260a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c6982612600565b9150612c7483612600565b9250828201905080821115612c8c57612c8b612c2f565b5b92915050565b6000612c9d82612600565b9150612ca883612600565b9250828203905081811115612cc057612cbf612c2f565b5b92915050565b6000604082019050612cdb600083018561260a565b612ce8602083018461260a565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612d4657808604811115612d2257612d21612c2f565b5b6001851615612d315780820291505b8081029050612d3f85612cef565b9450612d06565b94509492505050565b600082612d5f5760019050612e1b565b81612d6d5760009050612e1b565b8160018114612d835760028114612d8d57612dbc565b6001915050612e1b565b60ff841115612d9f57612d9e612c2f565b5b8360020a915084821115612db657612db5612c2f565b5b50612e1b565b5060208310610133831016604e8410600b8410161715612df15782820a905083811115612dec57612deb612c2f565b5b612e1b565b612dfe8484846001612cfc565b92509050818404811115612e1557612e14612c2f565b5b81810290505b9392505050565b6000612e2d82612600565b9150612e3883612600565b9250612e657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612d4f565b905092915050565b6000612e7882612600565b9150612e8383612600565b9250828202612e9181612600565b91508282048414831517612ea857612ea7612c2f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ee982612600565b9150612ef483612600565b925082612f0457612f03612eaf565b5b828204905092915050565b60008160601b9050919050565b6000612f2782612f0f565b9050919050565b6000612f3982612f1c565b9050919050565b612f51612f4c8261273b565b612f2e565b82525050565b6000819050919050565b612f72612f6d82612600565b612f57565b82525050565b6000612f848287612f40565b601482019150612f948286612f61565b602082019150612fa48285612f61565b602082019150612fb48284612f61565b60208201915081905095945050505050565b600081519050612fd581612648565b92915050565b600060208284031215612ff157612ff061263e565b5b6000612fff84828501612fc6565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613064602683612a4f565b915061306f82613008565b604082019050919050565b6000602082019050818103600083015261309381613057565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130d0602083612a4f565b91506130db8261309a565b602082019050919050565b600060208201905081810360008301526130ff816130c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061314082612600565b915061314b83612600565b92508261315b5761315a612eaf565b5b828206905092915050565b600061317182612600565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131a3576131a2612c2f565b5b600182019050919050565b60006080820190506131c36000830187612811565b6131d060208301866127b3565b6131dd6040830185612811565b6131ea6060830184612811565b9594505050505056fea26469706673582212202d5c6f3d07ff555c94e9b5ff68d4ff556052fb6eeb0c3814814451d1841f197864736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "aggregateValues(uint256[])": {
        "details": "This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value",
        "params": {
          "values": "An array of uint256 values from different signers"
        },
        "returns": {
          "_0": "Result of the aggregation in the form of a single number"
        }
      },
      "getDataServiceId()": {
        "details": "This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.",
        "returns": {
          "_0": "dataServiceId being consumed by contract"
        }
      },
      "getUniqueSignersThreshold()": {
        "details": "This function should be overridden by the child consumer contract.",
        "returns": {
          "_0": "The minimum required value of unique authorised signers"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validateTimestamp(uint256)": {
        "details": "This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid",
        "params": {
          "receivedTimestampMilliseconds": "Timestamp extracted from calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2614,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "insuredToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Metadata)802"
      },
      {
        "astId": 2617,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "treasuryToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20Metadata)802"
      },
      {
        "astId": 2619,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "policyPriceAPR",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2621,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "threshold",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2623,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 2625,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "oracleDecimals",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2630,
        "contract": "contracts/Insurance.sol:Insurance",
        "label": "policies",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Policy)2558_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Metadata)802": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Policy)2558_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IInsurance.Policy)",
        "numberOfBytes": "32",
        "value": "t_struct(Policy)2558_storage"
      },
      "t_struct(Policy)2558_storage": {
        "encoding": "inplace",
        "label": "struct IInsurance.Policy",
        "members": [
          {
            "astId": 2551,
            "contract": "contracts/Insurance.sol:Insurance",
            "label": "policyHolder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2553,
            "contract": "contracts/Insurance.sol:Insurance",
            "label": "insuredAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2555,
            "contract": "contracts/Insurance.sol:Insurance",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2557,
            "contract": "contracts/Insurance.sol:Insurance",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}